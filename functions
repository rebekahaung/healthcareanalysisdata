import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# defines the average treatment by cost
def average_treatment_cost_by_disease(file_path):
    df = pd.read_csv(file_path)

    if 'Medical Condition' not in df.columns or 'Billing Amount' not in df.columns:
        raise ValueError("The dataset must contain 'Medical Condition' and 'Billing Amount' columns.")

    average_costs = df.groupby('Medical Condition')['Billing Amount'].mean()

    print("Average Treatment Cost by Disease:")
    print(average_costs)

    return average_costs

#identifying high risk patients based on age and admission type
def identify_high_risk_patients(file_path, disease, age_threshold):
    df = pd.read_csv(file_path)
    if 'Medical Condition' not in df.columns or 'Age' not in df.columns or 'Admission Type' not in df.columns:
        raise ValueError("The dataset must contain 'Medical Condition', 'Age', 'Admission Type' and 'Test Results' columns.")

    high_risk_patients = df[(df['Medical Condition'] == disease) & (df['Age'] > age_threshold) & (df['Admission Type'] == 'Emergency') & (df['Test Results'] == 'Abnormal')]

    high_risk_patients = high_risk_patients[['Medical Condition', 'Age', 'Admission Type', 'Test Results']]

    print(f"High-Risk Patients for {disease}:")
    print(high_risk_patients)

    return high_risk_patients


# correlation between insurance provider and cost of treatment
def analyze_billing_by_insurance_provider(file_path):
    df = pd.read_csv(file_path)

    # Check if required columns exist
    if 'Insurance Provider' not in df.columns or 'Billing Amount' not in df.columns:
        raise ValueError("The dataset must contain Insurance Provider and Billing Amount columns.")

    # Group by Insurance Provider and calculate mean Billing Amount
    billing_summary = df.groupby('Insurance Provider')['Billing Amount'].mean().reset_index()

    print("Average Billing Amount by Insurance Provider:")
    print(billing_summary)

    # Plotting the results
    plt.figure(figsize=(10, 6))
    sns.barplot(x='Insurance Provider', y='Billing Amount', data=billing_summary)
    plt.title('Average Billing Amount by Insurance Provider')
    plt.ylabel('Average Billing Amount')
    plt.xlabel('Insurance Provider')
    plt.xticks(rotation=45)
    plt.show()

    return billing_summary


# driver code

def main():
    file_path = 'healthcare_dataset.csv'

    print("\n--- Average Treatment Age by Disease ---")
    try:
        print(average_treatment_cost_by_disease(file_path))
    except ValueError as e:
        print(e)

    print("\n--- Identifying High-Risk Patients for a Specific Disease ---")
    try:
        disease = 'Cancer' 
        high_risk_patients = identify_high_risk_patients(file_path, disease, age_threshold=80)
        print(high_risk_patients)
    except ValueError as e:
        print(e)

    print("\n--- Analyze billing by insurance provider ---")
    try:
        correlation = analyze_billing_by_insurance_provider(file_path)
        print(f"Correlation: {correlation:.2f}")
    except ValueError as e:
        print(e)


if __name__ == "__main__":
    main()
